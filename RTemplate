#loading packages
install.packages("fBasics") #better statistics summaries than standard summary function
install.packages("XLConnect")

#Loading libraries
#data manipulation
library(tidyverse)
library(lubridate)
library(reshape)# use transpose and melt
library(dplyr)
library(mice)# imputations

#machine learning
library(caret)
library(gbm)
library(randomForest)

#graphics
library(ggplot2)
library(gridExtra)#plot multiple graphs on one plot
library(corrplot)

#statistics
library(fBasics)
library(car)
library(ROCR)
library(Hmisc)
library(knitr)

#reading data
library(readxl)
library(XLConnect)
library(rjson)

#connect to sql server
library(odbc)

#----------------------------------------------------Load data---------------------------------------------------------------------
 
#load csv files
train <- read.csv('train.csv',
                  stringsAsFactors = FALSE, 
                  na.strings = c("NA",""), #which strings which are to be interpreted as NA
                  header=TRUE,# specifies whether there is a header row
                  sep=",",
                  row.names=c("X","Y","Z"),# specify row names
                  col.names=c("A","B","C"),# specify column names
                  as.is=1, # which columns to not convert over into factors
                  nrows=300,# number of rows to read in
                  blank.lines.skip = FALSE
                  skipNul=FALSE
                  )
test <-  read.csv('test.csv',stringsAsFactors = FALSE, na.strings = c("NA",""),header=TRUE, sep=",")

#load using read_csv from tidyverse
train<-read_csv(file, col_names = TRUE, col_types = list(col_double(), col_character()),
  locale = default_locale(), na = c("", "NA"), quoted_na = TRUE,
  quote = "\"", comment = "", trim_ws = TRUE, skip = 0, n_max = Inf,
  guess_max = min(1000, n_max), progress = show_progress())


#load excel file
train<-read_excel(xlsx_example, sheet = "chickwts")
train<-read_excel(xls_example, sheet = 4)
train<-read_excel(xlsx_example, n_max = 3)# specify number of rows to read in
train<-read_excel(xlsx_example, range = "C1:E4")
train<-read_excel(xlsx_example, range = cell_rows(1:4))
train<-read_excel(xlsx_example, range = cell_cols("B:D"))
train<-read_excel(xlsx_example, range = "mtcars!B1:D5")
train<-read_excel(xlsx_example, na = "setosa") #specify which values should be read as NAs

#load xml file
train <- xmlParse(file = "input.xml")

#load json file
train <- fromJSON(file = "input.json")

#connect to sql server
con <- dbConnect(odbc(),
                 Driver = "SQLServer",
                 Server = "mysqlhost",
                 Database = "mydbname",
                 UID = "myuser",
                 PWD = rstudioapi::askForPassword("Database password")
                 Port = 1433)
                 
con <- dbConnect(odbc::odbc(), "mydbalias")
                 
#----------------------------------------------Review data size and structure-------------------------------------------------------------

stru(train) #view the names of columns and their character types and samples of what the variables are
glimpse(train)

#finding mismatches between the data sets for categorical variables
setdiff(levels(test$Type), levels(train$Type))


#merge test and training data set
test$Result <- NA
all<-rbind(train,test)

#----------------------------------------------inspect completeness of the data-------------------------------------------------------------
sapply(all, function(x) unique(x)) # look for number of unique values
sapply(all, function(x) sum(is.na(x))) #number of NAs
round(sapply(all, function(x) sum(is.na(x))/length(x)), digits = 3) #percent of NA per column
sapply(all, function(x) length(which(x==0))) #number of 0's in data
round(sapply(all, function(x) length(which(x==0))/length(x)), digits = 2)#percent of 0's in data

#----------------------------------------------Change Data Types-------------------------------------------------------------
#convert values to factors
cols1 <- c("Col1","Col2","Col3","Col4")
all[cols1] <- lapply(all[cols1], factor)

# Transpose the data with "t" function
train.T <- as.data.frame(t(train[1:nrow(train),]))
train.T<-train.T[-(1:2),]#ignore first two rows

# Convert columns from factors to numeric because transposing turns data into factors
cols <- colnames(train.T)
train.T[,cols] <-lapply(train.T, function(x) as.numeric(as.character(x)))

#replace 0's with NA
train.T[train.T =="0"]<- NA

#get rid of scientific notation
options(scipen=999)

#---------------------------------------------Manipulate Dates------------------------------------------------------------------
#split the date column into three columns for day month and year and turn into factors
train <-train %>%
  separate(Open.Date,c("Year","Month","Day"), sep="-")

cols3 <- c("Year","Month","Day")
train[cols3] <- lapply(train[cols3], factor)

#code to convert the date variables into actual date values rather than their original string format
train$Req.Delv.Dt <- as.Date(train$Req.Delv.Dt,format="%m/%d/%Y")

#Code to convert times variables into acutal times from their original string values
#"01/01/2010" is just dummy data that is needed because the lubridate function of "mdy_hms" requires a date to be included 

train$Shipt.Orig.Appt.Time<-paste("01/01/2010 ", train$Shipt.Orig.Appt.Time)%>%
  mdy_hms()
  
#code to separate the dummy date values from the time
train%>%
  separate(Shipt.Orig.Appt.Time, c("Dummy.remove1", "Shipt.Orig.Appt.Time"), sep = " ")

#code to delete all the dummy data columns
train<- select(train,-c(Dummy.remove1,Dummy.remove2))

#code to use ifelse statements to create new columns that translate times into parts of the day, i.e. morning, afternoon, night, late night
train%>%
mutate(Shipt.Orig.Appt.parts.of.day = ifelse(Shipt.Orig.Appt.Time >= "05:00:00" & Shipt.Orig.Appt.Time <= "12:00:00","morning",
                                               ifelse(Shipt.Orig.Appt.Time > "12:00:00" & Shipt.Orig.Appt.Time <= "17:00:00","afternoon",
                                                      ifelse(Shipt.Orig.Appt.Time > "17:00:00" & Shipt.Orig.Appt.Time <= "21:00:00","evening", 
                                                             ifelse(Shipt.Orig.Appt.Time > "21:00:00" & Shipt.Orig.Appt.Time <= "24:00:00","night", "late night") ) ) ) )

#Code to add new variables that translante dates into days of the week
train%>%
mutate(requested.day = weekdays(Req.Delv.Dt))

#Set column names after loading data
colnames(train) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width","Species")

#---------------------------------------------Partition Data------------------------------------------------------------------
#partition the data if there are not training and test data sets
# create a list of 80% of the rows in the original dataset we can use for training
test_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)

# select 20% of the data for validation
test <- dataset[-test_index,]

# use the remaining 80% of data to training the models
train <- dataset[validation_index,]
